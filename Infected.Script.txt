#RequireContext CSmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "Libs/Nadeo/Mode.Script.txt" as Mode
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/InfectedLib.Script.txt" as InfectedLib

#Const	CompatibleMapTypes	"InfectedArena"
#Const	Version				"2012-10-29"

/* -------------------------------------- */
// Settings
/* -------------------------------------- */
#Setting	CaptureMaxValue		5000 
#Setting	TimeLimit			300	  

#Const	C_UITickInterval	200	///< Time interval between UI update

#Setting NumberOfBots 0 as "NumberOfBots"
#Setting PointLimit 100 as "PointLimit" // only respected if DynamicPointLimit is True
#Setting DynamicPointLimit True as "DynamicPointLimit"


***UIPlayer***
***
UI.StatusMessage = "";
***


/* ------------------------------------- */
/** Update the infos UI of a player
 *
 * @param	_Player		The player to update
 *
 * @return		The ManiaLink string
 */
Text UpdateLayerInfos(CSmPlayer _Player) {
	if (_Player.Score == Null) return "";
	
	return """
		<frame posn="150 -88">
			<label posn="0 1" halign="left" valign="bottom" text="/{{{ Scores.count }}}"/>
			<label posn="0 0" halign="right" valign="bottom" style="TextRaceChrono" text="{{{ Scores.keyof(_Player.Score) + 1 }}}"/>
		</frame>
	""";
}

/* ------------------------------------- */
/** Get the help manialink string.
 *
 * @return		The manialink string
 */
Text UpdateLayerSpawnScreen() {
	declare Text ML;
	
	declare RulesText = _("-at the beginning no one is infected\n-when pole is captured, the infected will be killed and a new infected will be choose by random\n-when pole is captured first time, no one will be killed, because there is no infected\n-when the infected hits another player, the infected pass the virus on the victim");
	declare RulesTip  = _("Press F1 to show rules");
	
	ML = """
		<script><!--
			main () {
				declare FrameRules	<=> Page.GetFirstChild("FrameRules");
				declare FrameShow	<=> Page.GetFirstChild("FrameShow");
				declare ShowRules = False;
				
				while(True) {
					if (ShowRules) {
						FrameRules.Show();
						FrameShow.Hide();
					} else {
						FrameRules.Hide();
						FrameShow.Show();
					}
					
					yield;
					
					// process events.
					foreach (Event in PendingEvents) {
						switch (Event.Type) {
							case CMlEvent::Type::MouseClick :
							{
								if (Event.ControlId == "FrameRules") ShowRules = !ShowRules;
							}
							
							case CMlEvent::Type::KeyPress:
							{
								if (Event.CharPressed == "2424832") ShowRules = !ShowRules;	// F1
							}
						}
					}
				}
			}
		--></script>
		<frame posn="0 -70 0" id="FrameShow">
			<quad posn="0 0 10" sizen="140 20" halign="center" valign="center" style="Bgs1InRace" substyle="BgTitle3_5" />
			<label posn="0 0 11" scale="2" halign="center" valign="center" style="TextTitle3" text="{{{ RulesTip }}}" />
		</frame>
		<frame posn="0 50 1" id="FrameRules">
			<frame posn="0 0 5">
				<quad posn="0 0 10" sizen="120 20" halign="center" valign="center" style="Bgs1InRace" substyle="BgTitle3_5" />
				<label posn="0 0 11" scale="2" halign="center" valign="center" style="TextTitle3" text="$fffMelee" />
			</frame>
			<frame posn="0 -10 5">
				<quad posn="0 0 10" sizen="300 120" halign="center" bgcolor="222c" />
				<label posn="-145 -5 11" sizen="145 5" scale="2" autonewline="1" style="TextCardSmallScores2" text="{{{ RulesText }}}" />
			</frame>
		</frame>
	""";
	
	return ML;
}

/* ------------------------------------- */
/** Create the Scores table manialink
 *
 *	@return		The ManiaLink string
 */
Text CreateLayerScoresTable() {
	return
"""
<frame posn="0 -47">
	<quad posn="0 0 1" sizen="40 8" style="Bgs1InRace" halign="center" substyle="BgList"/>
	<label posn="0 -2 2" sizen="40 8" halign="center" text="{{{_("Point limit")}}}: {{{ PointLimit }}}" />
</frame>
""";
}

/* ------------------------------------- */
/** Update the Scores in Spawn manialink
 *
 *	@return		The manialink string
 */
Text UpdateLayerScoresInSpawn() {
	declare Top3 = "";
	declare I = 0;
	declare Icons = ["First", "Second", "Third"];
	
	foreach (Score in Scores) {
		declare Pseudo = TextLib::MLEncode(Score.User.Name);
		
		Top3 ^=
"""
<frame posn="-140 {{{ I * -30 }}} -25">
	<quad posn="0 -2" sizen="30 30" valign="center" style="Icons64x64_1" substyle="{{{ Icons[I] }}}" />
	<label posn="30 0" sizen="200 20" textsize="15" valign="center" text="{{{ Pseudo }}}" />
	<label posn="270 0" sizen="20 20" textsize="15" halign="right" valign="center" text="{{{ Score.RoundPoints }}}" />
</frame>
""";
		I += 1;
		if (I >= 3) break;
	}
	
	return 
"""
<frame posn="0 85 -20">
	<frame posn="0 -65">
		<quad posn="0 15 -30" sizen="290 92" halign="center" bgcolor="222c" />
		{{{ Top3 }}}
	</frame>
</frame>
""";
}

/* ------------------------------------- */
// Main
/* ------------------------------------- */
main() {
	UseClans = False;
	declare Boolean IsWarmUp;
	declare Boolean IsRoundOver;
	declare Integer CurrentPointLimit = 0;
	
	declare LayerSpawnScreen <=> UIManager.UILayerCreate();
	declare LayerScoresTable <=> UIManager.UILayerCreate();
	LayerSpawnScreen.Type = CUILayer::EUILayerType::ScreenIn3d;
	LayerScoresTable.Type = CUILayer::EUILayerType::ScoresTable;
	
	
	while (!ServerShutdownRequested) {
/* ------------------------------------- */
// Map/Round begin
/* ------------------------------------- */
		Mode::LoadMap();
		
		Score::MatchBegin();
		Score::RoundBegin();
		
		MatchEndRequested = False;
		
		UIManager.ResetAll();
		SM::SetupDefaultVisibility();
		LayerSpawnScreen.ManialinkPage = UpdateLayerSpawnScreen();
		UIManager.UIAll.UILayers.add(LayerSpawnScreen);
		LayerScoresTable.ManialinkPage = CreateLayerScoresTable();
		UIManager.UIAll.UILayers.add(LayerScoresTable);
		
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::StartRound;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		UIManager.UIAll.BigMessage = _("New match");
		wait(UIManager.UIAll.UISequenceIsCompleted);
		
		// Start Match
		while (!MatchEndRequested && !ServerShutdownRequested) {
		    UIManager.UIAll.BigMessage = "";
		
		    UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
		    declare LastUITick = 0;
		    IsWarmUp = True;
		    SetNbFakePlayers ( 0, NumberOfBots);
	        if (DynamicPointLimit) {
			    if (Players.count > 0) {
			        CurrentPointLimit = Players.count * 10;
	            } else {
				    CurrentPointLimit = 22;
				}
			} else {
			    CurrentPointLimit = PointLimit;
			}
		
		    foreach (Player in Players) {
			    // Spawn 
			    if (Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned && !Player.RequestsSpectate) {
                    SetPlayerWeapon ( Player, CSmMode::EWeapon::Rocket, False);
			        SpawnPlayer ( Player, 0, -1, BlockSpawns[MathLib::Rand(0, BlockSpawns.count-1)], -1 );
			    }
		    }
		
		    foreach (Pole in BlockPoles) {
		        Pole.Gauge.Max = CaptureMaxValue;
				Pole.Gauge.Value = 0;
				Pole.Gauge.Clan = 0;
				Pole.Gauge.Speed = 0;
			}

			StartTime = Now;
			EndTime = StartTime + (TimeLimit * 1000);
			
            UIManager.UIAll.Hud3dMarkers = "";
			declare Ident InfectedPlayerId;
			IsRoundOver = False;
				    
			while (!IsRoundOver && !ServerShutdownRequested) {
			/* ------------------------------------- */
			// Play loop
			/* ------------------------------------- */
				yield;
			
				if ( !IsWarmUp ) UIManager.UIAll.Hud3dMarkers = """<marker label = "Infected" playerlogin = {{{InfectedLib::getPlayer ( InfectedPlayerId ).Login}}} />""" ;
			
				foreach (Event, PendingEvents) {
					if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) PassOn(Event);
					if (Event.Type == CSmModeEvent::EType::OnHit) {
						if ( !IsWarmUp && Event.Shooter == InfectedLib::getPlayer ( InfectedPlayerId ) ) {
							Score::AddPoints ( Event.Shooter, 1);
							InfectedPlayerId = InfectedLib::SetNewInfected ( Event.Victim.Id );
						}
						Discard(Event);
					} else if (Event.Type == CSmModeEvent::EType::OnPlayerRequestRespawn) {
						Discard(Event);
					} else {
						PassOn(Event);
					}
				}
			
				foreach (Pole in BlockPoles) {
					foreach (PlayerId in Pole.Sector.PlayersIds) {
						if ( !IsWarmUp ) {
							declare Player <=> Players[PlayerId];
							declare Boolean Assist for Player;
							if ( !Assist ) {
							    Score::AddPoints ( Player, 1);
								Assist = True;
							}
						}
					}
					+++Capturing+++
					Pole.Gauge.Speed = Pole.Sector.PlayersIds.count;
					if (Pole.Captured) {
						foreach (PlayerId in Pole.Sector.PlayersIds) {
							Score::AddPoints ( Players[PlayerId], 2);
						}
						if (IsWarmUp) {
							IsWarmUp = False;
							InfectedPlayerId = InfectedLib::SetNewInfected ( Players[MathLib::Rand (0, PlayersNbAlive-1)].Id );
							Pole.Gauge.Value = 0;
						} else {
							InfectedPlayerId = InfectedLib::SetNewInfectedAndKillOldOne (InfectedPlayerId);
							Pole.Gauge.Value = 0;
						}
						foreach (Player in Players) {
						    declare Boolean Assist for Player;
							Assist = False;
						}
					}
				}
			
				/* -------------------------------------- */
				// Update UI
				if (LastUITick + C_UITickInterval < Now) {
					declare UsedLayers = Ident[];
				
					// Add layer and create it if necessary
					foreach (Player in Players) {
						declare UI <=> UIManager.GetUI(Player);
						if (UI == Null) continue;
					
						declare CUILayer LayerInfos;
						if (UI.UILayers.count != 1) {
							LayerInfos <=> UIManager.UILayerCreate();
							UI.UILayers.add(LayerInfos);
						} else {
							LayerInfos <=> UI.UILayers[0];
						}
					    UsedLayers.add(LayerInfos.Id);
					    LayerInfos.ManialinkPage = UpdateLayerInfos(Player);
				    }
				    // Remove layers
				    declare LayersToRemove = Ident[];
				    foreach (Layer in UIManager.UIAll.UILayers) { UsedLayers.add(Layer.Id); }
				    foreach (Layer in UIManager.UILayers) {
					    if (!UsedLayers.exists(Layer.Id)) {
						    LayersToRemove.add(Layer.Id);
					    }
				    }
				    foreach (LayerId in LayersToRemove) {
					    UIManager.UILayerDestroy(UIManager.UILayers[LayerId]);
				    }
				
				    LastUITick = Now;
			    }
			
			    /* -------------------------------------- */
			    // roundend conditions
			    if (PlayersNbAlive == 1 && Now > StartTime + 10000 && Players.count > 1) IsRoundOver = True;	
		    }
		    Score::RoundEnd();
			foreach (Player in Players) {
			    UnspawnPlayer (Player);
			}
			foreach (Pole in BlockPoles) {
			    Pole.Gauge.Speed = 0;
			}
			UIManager.UIAll.StatusMessage = "";
			UIManager.UIAll.BigMessage = "Round Is Over";
			sleep (4000);
			foreach (Score in Scores) {
			    if (Score.Points >= CurrentPointLimit) MatchEndRequested = True;
			}
		}
		Score::MatchEnd(True);
		
		/* -------------------------------------- */
		// End match sequence
		declare CUser Winner <=> Null;
		declare MaxPoints = 0;
		foreach (Score in Scores) {
			if (Score.Points > MaxPoints) {
				MaxPoints = Score.Points;
				Winner <=> Score.User;
			} else if (Score.Points == MaxPoints) {
				Winner <=> Null;
			}
		}
		foreach (Player in Players) {
			if (Player.User != Winner) UnspawnPlayer(Player);
		}
		
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		if (Winner != Null) {
			UIManager.UIAll.BigMessage = TextLib::Compose(_("$<%1$> wins the match!"), Winner.Name);
		} else {
			UIManager.UIAll.BigMessage = _("|Match|Draw");
		}
		sleep(2000);
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
		sleep(5000);
		
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;
		wait(UIManager.UIAll.UISequenceIsCompleted);
		
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
		UIManager.UIAll.BigMessage = "";
		
		Mode::UnloadMap();
	}
	
	UIManager.UILayerDestroy(LayerSpawnScreen);
	UIManager.UILayerDestroy(LayerScoresTable);
}