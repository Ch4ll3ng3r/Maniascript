/*---------------------
Mode: Team Deathmatch
Author: racer_simon
---------------------*/

#Extends "Modes/Shootmania/ModeBase.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/Airshot.Script.txt" as Airshot
#Include "Libs/Nadeo/ShootMania/BalancedWeapons.Script.txt" as BalancedWeapons
#Include "Libs/Nadeo/Shootmania/AFK.Script.txt" as AFK
#Include "Libs/Nadeo/Shootmania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Nadeo/Message.Script.txt" as Message

#Const CompatibleMapTypes "TeamDeathmatchArena" 
#Const Version			  "2013-10-29"
#Const UITickPeriod	   	   200
#Const ScriptName		  "TeamDeathmatch.Script.txt"

#Setting S_RespawnTime		   6001   as "RespawnTime (in milliseconds)"
#Setting S_AutoBalance		   True	  as "AutoBalance"
#Setting S_RoundsToWin		   3	  as "RoundsToWin"
#Setting S_RoundGapToWin	   1	  as "RoundGapToWin"
#Setting S_RoundsLimit		   5	  as "RoundsLimit"
#Setting S_TimeLimit		   180    as "TimeLimit (in seconds)"
#Setting S_RapeStop            False  as "end the round when a team leads with X hits"
#Setting S_LeadHitsToWinRound  20     as "LeadHitsToWinRound"
#Setting S_HitsToWinRound	   100    as "HitsToWinRound (set value < 1 to deactivate)"  
#Setting S_LaserOneHitKill     True   as "LaserOneHitKill" 
#Setting S_FriendlyFire	       False  as "FriendlyFire"
#Setting S_PlayerArmor		   200    as "PlayerArmor (100 = 1 bar in HUD, don't use values < 100)"
#Setting S_SpawnProtectionTime 3000   as "SpawnProtectionTime (in milliseconds)"
#Setting S_MaxIdleDuration	   30     as "MaxIdleDuration (in seconds)"
#Setting S_AutoSwitchWeapon    True   as "AutoSwitchWeapon (weapon change by environment)"	
#Setting S_RandomWeapons       False  as "RandomWeapons"
#Setting S_RocketAmmoMax       4	  as "RocketAmmoMax"
#Setting S_LaserAmmoMax 	   1 	  as "LaserAmmoMax"
#Setting S_ArrowAmmoMax	       3      as "ArrowAmmoMax"
#Setting S_NucleusAmmoMax 	   2      as "NucleusAmmoMax"
#Setting S_NbBlueBots		   0	  as "NbBlueBots"
#Setting S_NbRedBots		   0	  as "NbRedBots"

declare Integer NbHitsBlue;
declare Integer NbHitsRed;
declare Text CurrentResult;
declare Integer ClanSide1;
declare Integer ClanSide2;
declare CSmBlockSpawn[Integer] Side1Spawn;
declare CSmBlockSpawn[Integer] Side2Spawn;
declare Integer[Ident] PlayersLastSpawnTime;

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(AFK::GetScriptName(), AFK::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(Victory::GetScriptName(), Victory::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
MB_LogVersion(BalancedWeapons::GetScriptName(), BalancedWeapons::GetScriptVersion());
***

***SleepLoop***
***
Message::Loop ();
***
	
***InitServer***
***
//MB_UseLogging = True;
ClanScores[1] = 0;
ClanScores[2] = 0;
UseClans = True;
declare LayerRoundInfo <=> UIManager.UILayerCreate();
***

***StartServer***
***
declare ModeName = "TeamDeathmatch";
declare ModeRules = "-The team with the most hits wins the round\n-The number, which is displayed under the time report, shows the number of hits of both teams\n-If activated, the round ends, when a team leads with X hits ( this get unbalanced rounds fast to the end )\n-Usually the round ends, when the time is over or a team has reached the number of hits to win a round\n-if activated, laser do only 1 damage instead of one hit kill\n-if friendly fire is activated, you can hit your teammates, but you and your team get a negative point for every teamhit";
SpawnScreen::CreateRules (ModeName, ModeRules);
SpawnScreen::CreateScores();
SpawnScreen::CreateMapInfo();
MB_UseSectionRound = True;
***

***InitMap***
***
Score::MatchBegin(False);	
Airshot::MatchBegin();
BalancedWeapons::MatchBegin();
Victory::MatchBegin();
if(S_AutoBalance) 
	AutoTeamBalance();
Mode::Ladder_OpenMatch_All();
+++MatchBegin+++	
		
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;

ClanScores[1] = 0;
ClanScores[2] = 0;

declare Integer i = 1;
declare Integer j = 1;
foreach (Spawn in BlockSpawns) 
{
    if (Spawn.Order == 1) {
	    Side1Spawn[i] = Spawn;
 		i += 1;
	} else if (Spawn.Order == 2) {
	    Side2Spawn[j] = Spawn;
		j += 1;
	}
}

foreach (Player in AllPlayers)
{
	PlayersLastSpawnTime[Player.Id] = 0;
}
***

***InitRound***
***
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Score::RoundBegin();	
Airshot::RoundBegin();
BalancedWeapons::RoundBegin();
Victory::RoundBegin();
+++RoundBegin+++
			
// Set Nb of Bots
SetNbFakePlayers (S_NbBlueBots, S_NbRedBots);

NbHitsBlue = 0;
NbHitsRed = 0;
CurrentResult = "$00f0 $fff: $f000";
UIManager.UIAll.BigMessage = "";
		
ClanSide1 = (MB_SectionRoundNb % 2) + 1;
ClanSide2 = 2 - (MB_SectionRoundNb % 2);
***

***StartRound***
***
SM::SetupDefaultVisibility ();
declare LatestUITick = Now;
StartTime = Now + S_RespawnTime;
EndTime = StartTime + S_TimeLimit * 1000;
***

***PlayLoop***
***
ProcessEvents ();
UIManager.UIAll.StatusMessage = CurrentResult;
SM::UnspawnPlayersChangingClan();		
foreach(Player in Players) {
    Player.IsHighlighted = Player.Armor > 0;
}
AFK::ManageAFKPlayers (S_MaxIdleDuration * 1000, 0);
RespawnPlayers ();
CheckRoundEndConditions ();
***

***EndRound***
***
StartTime = -1;
EndTime = -1;

if (Victory::IsRoundWinner(1)) 
{
	UIManager.UIAll.BigMessage = TextLib::Compose (Teams[0].ColorizedName ^ " wins the round");	
	ClanScores[1] += 1;			
} 
else if (Victory::IsRoundWinner(2)) 
{
	UIManager.UIAll.BigMessage = TextLib::Compose (Teams[1].ColorizedName ^ " wins the round");
	ClanScores[2] += 1;
} 
else 
{
	UIManager.UIAll.BigMessage = TextLib::Compose ("This round is a draw");
}

Victory::SetMatchWinnerFromScore(S_RoundsToWin, S_RoundGapToWin, S_RoundsLimit);

foreach (Player in AllPlayers)
{
	UnspawnPlayer (Player);
}

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
			
MB_Sleep (5000);

Score::RoundEnd();			
Airshot::RoundEnd();
BalancedWeapons::RoundEnd();
Victory::RoundEnd();	

CheckMatchEndConditions ();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
***

***EndMap***
***
UIManager.ResetAll();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Outro;

declare WinnerClan = -1;
if ( Victory::IsMatchWinner(1) ) 
{
	UIManager.UIAll.BigMessage = Teams[0].ColorizedName ^ " wins the match";
	WinnerClan = 1;
} 
else if (  Victory::IsMatchWinner(2) ) 
{
	UIManager.UIAll.BigMessage = Teams[1].ColorizedName ^ " wins the match";
	WinnerClan = 2;
}
		
MB_Sleep(6*1000);

if(WinnerClan != -1)
{
	// Reset score clans
	foreach (Score in Scores) { declare Integer Clan for Score; Clan = 0; }	
	foreach (Player in Players) {
		if (Player.Score == Null) continue;
		declare Integer Clan for Player.Score;
		Clan = Player.CurrentClan;				
	}
	// Sort scores by clan
	declare ClanScoresSorted = [1=>CSmScore[], 2=>CSmScore[]];	
	foreach (Score in Scores) {
		Score.LadderRankSortValue = 1000;
		declare Integer Clan for Score;
		if (Clan != 1 && Clan != 2) continue;
		ClanScoresSorted[Clan].add(Score);				
	}	
	declare Shift = [1=>1, 2=>1];
	Shift[3 - WinnerClan] = 2;			
	foreach(Index => Score in ClanScoresSorted[1]) {Score.LadderRankSortValue = Index * 2 + Shift[1];}
	foreach(Index => Score in ClanScoresSorted[2]) {Score.LadderRankSortValue = Index * 2 + Shift[2];}			
	
	Mode::Ladder_CloseMatch();
} 
else 
	Mode::Ladder_CancelMatch();
		
+++EndMatch+++
Score::MatchEnd();
Airshot::MatchEnd();
BalancedWeapons::MatchEnd();
Victory::MatchEnd();	

UIManager.UIAll.BigMessage = "";
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;				

MB_Sleep(10*1000);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UILayers.clear();
MB_Sleep(1*1000);
	
MatchEndRequested = False;
***

***EndServer***
***
SpawnScreen::DestroyRules ();
SpawnScreen::DestroyScores ();
SpawnScreen::DestroyMapInfo( );
UIManager.UILayerDestroy(LayerRoundInfo);
***
	
Void RespawnPlayers ()
{
	foreach (Player in AllPlayers) 
	{
		if ((Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) && (!Player.RequestsSpectate)) 
		{
			// Set Player ArmorMax and LastSpawnTime
			Player.ArmorMax = S_PlayerArmor;
			PlayersLastSpawnTime[Player.Id] = Now + S_RespawnTime;
			
			// Set Player Weapon
			if (S_RandomWeapons)
			{
				declare Integer LuckyNumber = MathLib::Rand (1,4);
				switch (LuckyNumber)
				{
					case 1:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);
					case 2:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Laser, S_AutoSwitchWeapon);
					case 3:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Arrow, S_AutoSwitchWeapon);
					case 4:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Nucleus, S_AutoSwitchWeapon);
					default:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);					
				}
			}
			else
				SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);
			
			// Set Player AmmoMax
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Rocket, S_RocketAmmoMax);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Laser, S_LaserAmmoMax);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Arrow, S_ArrowAmmoMax);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Nucleus, S_NucleusAmmoMax);
			
			// Spawn Player
			if (Player.RequestedClan == ClanSide1) 							
				SM::SpawnPlayer (Player, Player.RequestedClan, Player.ArmorMax, Side1Spawn[MathLib::Rand ( 1, Side1Spawn.count)], Now + S_RespawnTime);
			else if (Player.RequestedClan == ClanSide2) 							
				SM::SpawnPlayer (Player, Player.RequestedClan, Player.ArmorMax, Side2Spawn[MathLib::Rand ( 1, Side2Spawn.count)], Now + S_RespawnTime);
		}	
	}
}

Void ProcessEvents ()
{
	foreach(Event, PendingEvents) 
	{
		if( Event.Type == CSmModeEvent::EType::OnHit ) 
		{				
	        if ( Event.Shooter == Null || Event.Victim == Null || Event.Shooter == Event.Victim ) 
			    Discard(Event);
			else if ((UseClans) && (Event.Shooter.CurrentClan == Event.Victim.CurrentClan) && (Now > PlayersLastSpawnTime[Event.Victim.Id] + S_SpawnProtectionTime)) 
			{
				if (S_FriendlyFire)
				{
					if(Event.Damage > 0) {
						if (!S_LaserOneHitKill)
							Event.Damage = 100;
						Score::AddPoints( Event.Shooter, -1);									
						Airshot::OnHit(Event.Shooter, Event.Victim);
						if (Event.Shooter.CurrentClan == 1 && NbHitsBlue > 0)
							NbHitsBlue -= 1;
						else if (Event.Shooter.CurrentClan == 2 && NbHitsRed > 0)
							NbHitsRed -= 1;
						CurrentResult = "$00f" ^ TextLib::ToText (NbHitsBlue) ^ "$fff : $f00" ^ TextLib::ToText (NbHitsRed);
					}
					PassOn(Event);
				}
				else
					Discard(Event);
		    }
			else if (Now > PlayersLastSpawnTime[Event.Victim.Id] + S_SpawnProtectionTime)
			{			
    			if(Event.Damage > 0) {
				    if (!S_LaserOneHitKill)
					    Event.Damage = 100;
				    Score::AddPoints( Event.Shooter, 1);									
				    Airshot::OnHit(Event.Shooter, Event.Victim);
					if (Event.Shooter.CurrentClan == 1)
					{
					    NbHitsBlue += 1;
					}
					else if (Event.Shooter.CurrentClan == 2)
					    NbHitsRed += 1;
					CurrentResult = "$00f" ^ TextLib::ToText (NbHitsBlue) ^ "$fff : $f00" ^ TextLib::ToText (NbHitsRed);
				}
				PassOn(Event);
			}
		}
		else if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) 
		{		
			BalancedWeapons::OnOut(Event.Shooter, Event.Victim);
		    PassOn(Event);												
		}
		else if (Event.Type == CSmModeEvent::EType::OnPlayerAdded)
		{
			PlayersLastSpawnTime[Event.Player.Id] = 0;
			PassOn (Event);
		}
		else if (Event.Type == CSmModeEvent::EType::OnPlayerRemoved)
		{
			if (PlayersLastSpawnTime.removekey (Event.Player.Id))
				log (Event.Player.Login ^ " left");
			PassOn (Event);
		}
		else 
			PassOn(Event);
	}
}

Void CheckRoundEndConditions ()
{
	if (S_RapeStop) 
	{
	    if (NbHitsBlue - NbHitsRed >= S_LeadHitsToWinRound)
		{
		    Victory::SetRoundWinnerIfNoWinner(1);
			MB_StopRound = True;
		}
	    else if (NbHitsBlue - NbHitsRed <= -1 * S_LeadHitsToWinRound) 
		{
		    Victory::SetRoundWinnerIfNoWinner(2);
			MB_StopRound = True;
		}
	}
	
	if (S_HitsToWinRound > 0)
	{ 
	    if (NbHitsBlue >= S_HitsToWinRound)
		{
		    Victory::SetRoundWinnerIfNoWinner(1);
			MB_StopRound = True;
		}
		else if (NbHitsRed >= S_HitsToWinRound)
		{
		    Victory::SetRoundWinnerIfNoWinner(2);
			MB_StopRound = True;
		}
	}
	
		
	if(Now > EndTime) 
	{
		if (NbHitsBlue > NbHitsRed)
		{
		    Victory::SetRoundWinnerIfNoWinner (1);
		}
		else if (NbHitsBlue < NbHitsRed)
		{
		    Victory::SetRoundWinnerIfNoWinner (2);
		}
		else
		{
		    Victory::SetRoundDrawIfNoWinner ();
		}
		MB_StopRound = True;
	}
}

Void CheckMatchEndConditions ()
{
	if(!Victory::NoMatchWinner() || MatchEndRequested) 
		MB_StopMatch = True;
}