/*---------------------
Mode: King Of The Hill
Author: racer_simon
---------------------*/

#Extends "Modes/Shootmania/ModeBase.Script.txt"

#Include "TextLib" as TextLib
#Include "MathLib" as MathLib
#Include "Libs/Nadeo/ShootMania/SM.Script.txt" as SM
#Include "Libs/Nadeo/Victory.Script.txt" as Victory
#Include "Libs/Nadeo/ShootMania/Score.Script.txt" as Score
#Include "Libs/Nadeo/ShootMania/Airshot.Script.txt" as Airshot
#Include "Libs/Nadeo/ShootMania/BalancedWeapons.Script.txt" as BalancedWeapons
#Include "Libs/Nadeo/Shootmania/AFK.Script.txt" as AFK
#Include "Libs/Nadeo/Shootmania/SpawnScreen.Script.txt" as SpawnScreen
#Include "Libs/Nadeo/Message.Script.txt" as Message

#Const CompatibleMapTypes "KingOfTheHillArena" 
#Const Version			  "2013-10-30"
#Const UITickPeriod	   	   200
#Const ScriptName		  "KingOfTheHill.Script.txt"

#Setting S_RespawnTime		 5000  as "RespawnTime (in milliseconds)"
#Setting S_AutoBalance		 True  as "AutoBalance"
#Setting S_RoundsToWin		 3     as "RoundsToWin"
#Setting S_RoundGapToWin	 1 	   as "RoundGapToWin"
#Setting S_RoundsLimit		 5 	   as "RoundsLimit"
#Setting S_TimeLimit		 300   as "TimeLimit (in seconds)"
#Setting S_CaptureMaxValue	 2000  as "time to capture pole (in milliseconds)"
#Setting S_PointLimit	     100   as "PointLimit"
#Setting S_CapturingBonus    1     as "CapturingBonus"
#Setting S_NeutralizingBonus 1     as "NeutralizingBonus"
#Setting S_LaserOneHitKill	 False as "LaserOneHitKill"
#Setting S_FriendlyFire	     False as "Friendly Fire"
#Setting S_AutoSwitchWeapon  True  as "AutoSwitchWeapon (weapon change by environment)"
#Setting S_RandomWeapons     False as "RandomWeapons"
#Setting S_MaxIdleDuration   30    as "MaxIdleDuration (in seconds)"
#Setting S_NbBlueBots 		 0     as "number of bots in blue team"
#Setting S_NbRedBots  		 0     as "number of bots in red team"

declare Integer ClanSide1;
declare Integer ClanSide2;
declare CSmBlockSpawn[Integer] Side1Spawn;
declare CSmBlockSpawn[Integer] Side2Spawn;
declare Integer i;
declare Integer j;
declare Integer[Integer] ClansCurrentPoints;
declare Integer LastPointEarn;
declare Boolean NeutralizingBonusDistributed;
declare Boolean CapturingBonusDistributed;

***LogVersion***
***
MB_LogVersion(ScriptName, Version);
MB_LogVersion(SM::GetScriptName(), SM::GetScriptVersion());
MB_LogVersion(AFK::GetScriptName(), AFK::GetScriptVersion());
MB_LogVersion(Score::GetScriptName(), Score::GetScriptVersion());
MB_LogVersion(Message::GetScriptName(), Message::GetScriptVersion());
MB_LogVersion(Victory::GetScriptName(), Victory::GetScriptVersion());
MB_LogVersion(SpawnScreen::GetScriptName(), SpawnScreen::GetScriptVersion());
MB_LogVersion(BalancedWeapons::GetScriptName(), BalancedWeapons::GetScriptVersion());
***

***SleepLoop***
***
Message::Loop ();
***

***InitServer***
***
ClanScores[1] = 0;
ClanScores[2] = 0;
UseClans = True;
declare LayerRoundInfo <=> UIManager.UILayerCreate();
***

***StartServer***
***
declare ModeName = "KingOfTheHill";
declare ModeRules = "-the team, which reaches the point limit first, wins the round\n-the team, which has captured the pole, earns points\n-if time is over and no team has reached the point limit, it is a draw";
SpawnScreen::CreateRules (ModeName, ModeRules);
SpawnScreen::CreateScores ();
SpawnScreen::CreateMapInfo ();
MB_UseSectionRound = True;
***

***InitMap***
***
Score::MatchBegin(False);	
Airshot::MatchBegin();
BalancedWeapons::MatchBegin();
Victory::MatchBegin();
if(S_AutoBalance) 
    AutoTeamBalance();
Mode::Ladder_OpenMatch_All();
+++MatchBegin+++
		
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Intro;

ClanScores[1] = 0;
ClanScores[2] = 0;

declare Integer i = 1;
declare Integer j = 1;
foreach (Spawn in BlockSpawns) 
{
  	if (Spawn.Order == 1) 
	{
	    Side1Spawn[i] = Spawn;
  		i += 1;
	} 
	else if (Spawn.Order == 2) 
	{
	    Side2Spawn[j] = Spawn;
        j += 1;
	}
}
***

***InitRound***
***
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
Score::RoundBegin();	
Airshot::RoundBegin();
BalancedWeapons::RoundBegin();
Victory::RoundBegin();

// Clear UI
UIManager.UIAll.BigMessage = "";
UIManager.UIAll.StatusMessage = "";
			
// Set Nb of Bots
SetNbFakePlayers (S_NbBlueBots, S_NbRedBots);

// Define which clan is on which side
ClanSide1 = (MB_SectionRoundNb % 2) + 1;
ClanSide2 = 2 - (MB_SectionRoundNb % 2);

for (Clan, 1, 2) 
{
    ClansCurrentPoints[Clan] = 0;
}
			
LastPointEarn = 0;
foreach (Pole in BlockPoles) 
{
    Pole.Gauge.Max = S_CaptureMaxValue;
}
			
CapturingBonusDistributed = False;
NeutralizingBonusDistributed = False;
***

***StartRound***
***
SM::SetupDefaultVisibility ();
declare LatestUITick = Now;
StartTime = Now + S_RespawnTime;
EndTime = StartTime + S_TimeLimit * 1000;
***

***PlayLoop***
***
UIManager.UIAll.StatusMessage = "$00f" ^ ClansCurrentPoints[1] ^ "$fff - $f00" ^ ClansCurrentPoints[2];
ProcessEvents ();
ProcessPoleCapturing ();
SM::UnspawnPlayersChangingClan();	
foreach(Player in Players) 
{
	Player.IsHighlighted = Player.Armor > 0;
}
AFK::ManageAFKPlayers (S_MaxIdleDuration * 1000, 0);
RespawnPlayers ();
CheckRoundEndConditions ();
***

***EndRound***
***
StartTime = -1;
EndTime = -1;

// reset poles
foreach (Pole in BlockPoles) {
    Pole.Gauge.Value = 0;
	Pole.Gauge.Speed = 0;
	UIManager.UIAll.Hud3dMarkers = "";
}

if (Victory::IsRoundWinner(1)) 
{
	UIManager.UIAll.BigMessage = TextLib::Compose (Teams[0].ColorizedName ^ " wins the round");	
	ClanScores[1] += 1;			
} 
else if (Victory::IsRoundWinner(2)) 
{
	UIManager.UIAll.BigMessage = TextLib::Compose (Teams[1].ColorizedName ^ " wins the round");
	ClanScores[2] += 1;
} 
else 
{
	UIManager.UIAll.BigMessage = TextLib::Compose ("This round is a draw");
}

Victory::SetMatchWinnerFromScore(S_RoundsToWin, S_RoundGapToWin, S_RoundsLimit);

foreach (Player in AllPlayers)
{
	UnspawnPlayer (Player);
}

UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
			
MB_Sleep (5000);

Score::RoundEnd();			
Airshot::RoundEnd();
BalancedWeapons::RoundEnd();
Victory::RoundEnd();	

CheckMatchEndConditions ();
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
***

***EndMap***
***
UIManager.ResetAll();
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Outro;

declare WinnerClan = -1;
if ( Victory::IsMatchWinner(1) ) 
{
	UIManager.UIAll.BigMessage = Teams[0].ColorizedName ^ " wins the match";
	WinnerClan = 1;
} 
else if (  Victory::IsMatchWinner(2) ) 
{
	UIManager.UIAll.BigMessage = Teams[1].ColorizedName ^ " wins the match";
	WinnerClan = 2;
}
		
MB_Sleep(6*1000);

if(WinnerClan != -1)
{
	// Reset score clans
	foreach (Score in Scores) { declare Integer Clan for Score; Clan = 0; }	
	foreach (Player in Players) {
		if (Player.Score == Null) continue;
		declare Integer Clan for Player.Score;
		Clan = Player.CurrentClan;				
	}
	// Sort scores by clan
	declare ClanScoresSorted = [1=>CSmScore[], 2=>CSmScore[]];	
	foreach (Score in Scores) {
		Score.LadderRankSortValue = 1000;
		declare Integer Clan for Score;
		if (Clan != 1 && Clan != 2) continue;
		ClanScoresSorted[Clan].add(Score);				
	}	
	declare Shift = [1=>1, 2=>1];
	Shift[3 - WinnerClan] = 2;			
	foreach(Index => Score in ClanScoresSorted[1]) {Score.LadderRankSortValue = Index * 2 + Shift[1];}
	foreach(Index => Score in ClanScoresSorted[2]) {Score.LadderRankSortValue = Index * 2 + Shift[2];}			
	
	Mode::Ladder_CloseMatch();
} 
else 
	Mode::Ladder_CancelMatch();
		
+++EndMatch+++
Score::MatchEnd();
Airshot::MatchEnd();
BalancedWeapons::MatchEnd();
Victory::MatchEnd();	

UIManager.UIAll.BigMessage = "";
UIManager.UIAll.UISequence = CUIConfig::EUISequence::Podium;				

MB_Sleep(10*1000);
UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
UIManager.UIAll.UILayers.clear();
MB_Sleep(1*1000);
	
MatchEndRequested = False;
***

***EndServer***
***
SpawnScreen::DestroyRules ();
SpawnScreen::DestroyScores ();
SpawnScreen::DestroyMapInfo ();
UIManager.UILayerDestroy(LayerRoundInfo);
***						
			  
Void ProcessEvents ()
{
	foreach(Event, PendingEvents) 
	{
		if( Event.Type == CSmModeEvent::EType::OnHit ) 
		{				
	        if ( Event.Shooter == Null || Event.Victim == Null || Event.Shooter == Event.Victim ) 
			    Discard(Event);
			else if ((UseClans) && (Event.Shooter.CurrentClan == Event.Victim.CurrentClan)) 
			{
				if (S_FriendlyFire)
				{
					if(Event.Damage > 0) {
						if (!S_LaserOneHitKill)
							Event.Damage = 100;
						Score::AddPoints( Event.Shooter, -1);									
						Airshot::OnHit(Event.Shooter, Event.Victim);
					}
					PassOn(Event);
				}
				else
					Discard(Event);
		    }
			else
			{			
    			if(Event.Damage > 0) {
				    if (!S_LaserOneHitKill)
					    Event.Damage = 100;
				    Score::AddPoints( Event.Shooter, 1);									
				    Airshot::OnHit(Event.Shooter, Event.Victim);
				}
				PassOn(Event);
			}
		}
		else if (Event.Type == CSmModeEvent::EType::OnArmorEmpty) 
		{		
			BalancedWeapons::OnOut(Event.Shooter, Event.Victim);
		    PassOn(Event);												
		}
		else 
			PassOn(Event);
	}
}

Void ProcessPoleCapturing ()
{
	foreach (Pole in BlockPoles) {
	    UIManager.UIAll.Hud3dMarkers = """<marker label = "Pole" pos = "{{{Pole.Position.X}}} {{{Pole.Position.Y + 25.}}} {{{Pole.Position.Z}}}"/>""";
	    declare Boolean IsCapturePossible = True;
		declare Integer[Integer] ClansNbPlayersInPoleSector = [1 => 0, 2 => 0];
		foreach (PlayerId in Pole.Sector.PlayersIds) 
		{
		    ClansNbPlayersInPoleSector[Players[PlayerId].CurrentClan] += 1;
		}
		if (ClansNbPlayersInPoleSector[1] == ClansNbPlayersInPoleSector[2]) 
			IsCapturePossible = False;
					
		if (IsCapturePossible) 
		{
		    foreach (PlayerId in Pole.Sector.PlayersIds) 
			{
			    if ((Pole.Gauge.Clan != Players[PlayerId].CurrentClan) && (Pole.Gauge.Value != 0))
				    Pole.Gauge.Speed = -1;
				else 
				{
			        Pole.Gauge.Clan = Players[PlayerId].CurrentClan;
					if (Pole.Gauge.Value < S_CaptureMaxValue) 
						Pole.Gauge.Speed = 1;
				}
			}
		} 
		else 
		    Pole.Gauge.Speed = 0;
			
		if (Pole.Captured) 
		{
		    if (Now >= LastPointEarn + 1000) 
			{
		        LastPointEarn = Now;
			    ClansCurrentPoints[Pole.Gauge.Clan] += 1;
			}
			if (!CapturingBonusDistributed) 
			{
			    foreach (PlayerId in Pole.Sector.PlayersIds) 
				{
				    if (Players[PlayerId].CurrentClan == Pole.Gauge.Clan) Score::AddPoints (Players[PlayerId], S_CapturingBonus);
				}
				CapturingBonusDistributed = True;
			}
		} 
		else 
		    CapturingBonusDistributed = False;
			
		if ((Pole.Gauge.Value == 0) && (!NeutralizingBonusDistributed)) 
		{ 
			foreach (PlayerId in Pole.Sector.PlayersIds) 
			{
			    if (Players[PlayerId].CurrentClan == Pole.Gauge.Clan) Score::AddPoints (Players[PlayerId], S_NeutralizingBonus);
			}
			NeutralizingBonusDistributed = True;
		} else if (Pole.Gauge.Value != 0)
		    NeutralizingBonusDistributed = False;
	}
}

Void RespawnPlayers ()
{
	foreach (Player in AllPlayers) 
	{
		if ((Player.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned) && (!Player.RequestsSpectate)) 
		{
			// Set Player Weapon
			if (S_RandomWeapons)
			{
				declare Integer LuckyNumber = MathLib::Rand (1,4);
				switch (LuckyNumber)
				{
					case 1:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);
					case 2:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Laser, S_AutoSwitchWeapon);
					case 3:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Arrow, S_AutoSwitchWeapon);
					case 4:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Nucleus, S_AutoSwitchWeapon);
					default:
						SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);					
				}
			}
			else
				SetPlayerWeapon (Player, CSmMode::EWeapon::Rocket, S_AutoSwitchWeapon);
			
			// Set Player AmmoMax
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Rocket, 4);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Laser, 1);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Arrow, 3);
			SetPlayerAmmoMax (Player, CSmMode::EWeapon::Nucleus, 2);
			
			// Spawn Player
			if (Player.RequestedClan == ClanSide1) 							
				SM::SpawnPlayer (Player, Player.RequestedClan, Player.ArmorMax, Side1Spawn[MathLib::Rand ( 1, Side1Spawn.count)], Now + S_RespawnTime);
			else if (Player.RequestedClan == ClanSide2) 							
				SM::SpawnPlayer (Player, Player.RequestedClan, Player.ArmorMax, Side2Spawn[MathLib::Rand ( 1, Side2Spawn.count)], Now + S_RespawnTime);
		}	
	}
}

Void CheckRoundEndConditions ()
{
	for (Clan, 1, 2) 
	{
	    if (ClansCurrentPoints[Clan] > S_PointLimit)
		{ 
			Victory::SetRoundWinnerIfNoWinner (Clan);
			MB_StopRound = True;
		}
	}
	if (Now >= EndTime) 
	{
	    Victory::SetRoundDrawIfNoWinner();
		MB_StopRound = True;
	}
}

Void CheckMatchEndConditions ()
{
	if ((!Victory::NoMatchWinner()) || (MatchEndRequested)) 
		MB_StopMatch = True;
}	